/**
 * dBase CRUD basic functions library
 * 
 * rel 1.0 20200805
 * 
 * dataFromQuery(qry)
 * arrayFromRecordSet(rSet)
 *  htmlOutputBuilder(rSet)//not used
 * createNewRecord(values)
 * ----CLASS
 * CRUD basic crud Op
 * 
 * #all functions move to classes
 * 
*/

class Crud {
  
  constructor(arrayCrud) {
    this.crudOperationType =arrayCrud[0];
    this.crudServerAddress =arrayCrud[1];
    this.crudUserName=arrayCrud[2];
    this.crudUserPassword=arrayCrud[3];
    this.crudDatabaseName=arrayCrud[4];  
  }

      /*methods*/
  getDatabaseName() {
    return "Database  name:  " + this.crudDatabaseName; 
  }  
  
  setCrudStatement(){
      //setting db connection & statement
    console.log('in setCrudStatement');//test
    this.dbUrl = 'jdbc:mysql://' + this.crudServerAddress + '/' + this.crudDatabaseName;
    this.conn = Jdbc.getConnection(this.dbUrl, this.crudUserName, this.crudUserPassword);
    this.stmt = this.conn.createStatement(); //oggetto statement  per settings e interazione con elementi del database 
    
      // Read up to 2000 rows of data from the table and log them. //not so useful     
    this.stmt.setMaxRows(2000); //it can dinamically changed and or done inside the qry  
      
      //EOF return statement object
    return this.stmt
  }

  setCrudConnection(){
      //setting db prepared connection 
    console.log('in setCrudConnection');//test
    this.dbUrl = 'jdbc:mysql://' + this.crudServerAddress + '/' + this.crudDatabaseName;
    this.conn = Jdbc.getConnection(this.dbUrl, this.crudUserName, this.crudUserPassword);
    return this.conn
  }

  getArrayDataFromQuery(qry){
    /*reading qry as input, 2dNumeric array as output*/
      //init&testing
    console.log('in getArrayDataFromQry');
    this.stmt=this.setCrudStatement();

      //test di accesso alle tabelle del database
    this.qry=qry;
    this.results = this.stmt.executeQuery(this.qry); //qry launch against dB
    this.arrMetadata=this.getMetadataFromQry(this.results); //custom function
    
      //get table row by row and create a 2D array  
    this.element=''; //generic string 
    this.rsValues=[]; //initializing recordSet 2D array
    while (this.results.next()) {
      
      this.rowData=[]; //initializing rowData for each record of rs.
      
        //building each rsValues element
      for (this.col = 1; this.col < this.numCols+1; this.col++) {      
        this.element=this.results.getString(this.col);
        this.rowData.push(this.element) // each value of rowData array is a string!
      }  
      
        //building dataset as an array 2D (each element of array is an array. -> (ie array of arrays))
      this.rsValues.push(this.rowData);
    }
  //return arrResults;  // se invio questo ho anche i nomi delle colonne (fields names)
  return this.rsValues;
  }







  createRecord(table, appValues){
    /**
     * create a new record with passed values on specified table
     * 
     * @param table (str) tabella sulla quale creare il nuovo record
     * @param appValues (arr) array con i dati del nuovo record 
     * 
     * i dati per l'accesso al database e alla tabella di lavoro sono hc nella funzione
     * ***ATTENZIONE non usare la keywor limit (o altre keyword sql come nome dei campi; jdbc segnala errori in maniera non chiara)
    */
    
    console.log('in createRecord'); //test
    console.log ('valori trasmessi '+appValues);//test

    //connessione al database 
    this.dbUrl = 'jdbc:mysql://' + this.crudServerAddress + '/' + this.crudDatabaseName;
    this.conn = Jdbc.getConnection(this.dbUrl, this.crudUserName, this.crudUserPassword);
    console.log('connessione stabilita');//test
    
    //acquisizione tabella db e valori del nuovo record
    this.table=table;
    this.values=appValues;
  
    //switch case to select insert qry related to current db table 

    switch (this.table) {
      case 'COM_Offerte':
        // pattern by https://stackoverflow.com/questions/42224385/get-identity-of-last-inserted-row-in-google-apps-script
        
          //building connection and statement for metadata management
        /*connection is already Ok*/

        
        //questa query va parametrizzata o modificata per ogni singola tabella o Join
        this.qry = "INSERT INTO "+this.table+"(`cod`, `nomeBreveCliente`, `riferimentoCliente`, `oggetto`, `importo`, `note`, "
        +"`idGame`, `idCliente`, `apertura`, `scadenza`, `archiviazione`, `idOperatore`, `idRichiedente`, `esito`, "
        +"`stato`, `tipologia`, `categoria`, `path`) "
        + "values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?)";
        console.log(this.qry+', 1');
        break;
      
      case 'ACQ_PR': //not use by now
        // qry building 
        break;
      
      default:
        console.log("No value found");
    }       
    
       
      this.stmt = this.conn.prepareStatement(this.qry, 1);// added autoGeneratedKeys flag


      this.stmt.setString(1, this.values[0]);
      this.stmt.setString(2, this.values[1]);
      this.stmt.setString(3, this.values[2]);
      this.stmt.setString(4, this.values[3]);
      this.stmt.setString(5, this.values[4]);
      this.stmt.setString(6, this.values[5]);
      this.stmt.setString(7, this.values[6]);
      this.stmt.setString(8, this.values[7]);
      this.stmt.setString(9, this.values[8]);
      this.stmt.setString(10, this.values[9]);
      this.stmt.setString(11, this.values[10]);
      this.stmt.setString(12, this.values[11]);
      this.stmt.setString(13, this.values[12]);
      this.stmt.setString(14, this.values[13]);
      this.stmt.setString(15, this.values[14]);
      this.stmt.setString(16, this.values[15]);
      this.stmt.setString(17, this.values[16]);
      this.stmt.setString(18, this.values[17]);
      
      this.results=this.stmt.execute();//as in ordinary old versione of code
      
        // start of additional code - getting idLast
      this.resultsExt = this.stmt.getGeneratedKeys();

      while (this.resultsExt.next()) {
        this.idLastRecord = this.resultsExt.getInt(1);
      }

      Logger.log(this.idLastRecord);
        // end of additional code
      console.log('out from  createRecord method');
      
        //return status and last id
      this.resultsArray=[this.results,this.idLastRecord];//it works Fine!!!
      return this.resultsArray
    
    /*developer notes*/
    /** execute method can be used with any type of SQL statements and it returns a boolean.
     * A true indicates that the execute method returned a result set object which can be 
     * retrieved using getResultSet method. false indicates that the query returned an 
     * int value or void.
    */
    //x adesso ritorna false. Non so come ottenere il nr di record inseriti!!
  }


  

  getDataFromQry(qry){
    console.log('in getReaDataFromQry');  
    this.stmt=this.setCrudStatement();
    //test di accesso alle tabelle del database
    this.qry=qry;
    //this.qry='SELECT * FROM SB_MMazza.AMM_Operations;';//---da passare come argomento
    this.results = this.stmt.executeQuery(this.qry);
    this.arrMetadata=this.getMetadataFromQry(this.results);
    
    //formatta JdbcResultSet come array di stringhe
    this.arrRecordSet =[]; //array che contiene una stringa formattata come record per ogni elemento
  
    while (this.results.next()) {
      
      this.rowString = '';
      this.numRow= this.results.getRow();
      for (this.col = 0; this.col < this.numCols; this.col++) {
        this.rowString += this.results.getString(this.col + 1) + '\t'; //t as tab; building a row string as result to output  
      }
      this.arrRecordSet.push(this.rowString);
    }
    
    //output data
    return this.arrRecordSet;
  }

  getMetadataFromQry(results){
    //reading metadata from JdbcResultSets
    this.results=results;
    console.log('in getMetadataFromQry method '+results);
    
    //obtaining number of query columns
    this.numCols = this.results.getMetaData().getColumnCount(); //get number of query fields  
    
    //obtaining name of fields
    this.colNames=[];
    for (var k =1; k<this.numCols+1; k++){
        this.colName = this.results.getMetaData().getColumnName(k);
        this.colNames.push(this.colName);
    }
    //building output array
    this.arrMetadata =[this.numCols,this.colNames];
    //console.log(this.arrMetadata);
    return this.arrMetadata;     
  }

  updateDataFromValues(table, values){
    /*it works both operation and other amm tables.
    set qry and jdbc statement based on passed table
    sure it can be improved!!! */
    
      //init &testing
    console.log('in updateDataFromQuery');
    console.log ('valori trasmessi '+values);
    this.values=values;
    this.table=table
    
      //connessione al database (oggetto conn)
    this.dbUrl = 'jdbc:mysql://' + this.crudServerAddress + '/' + this.crudDatabaseName;
    this.conn = Jdbc.getConnection(this.dbUrl, this.crudUserName, this.crudUserPassword);
    
    
    /* qry and statament  area */
    
      //operation case
    if (this.table=='AMM_Operations'){
      this.qry = "update `SB_MMazza`.`AMM_Operations` set  oggetto=? , note=? , "
      +"inizio=? , termine=? , stato=? , tipologia=? , "
      +"categoria=? , path=? , fkOperatore=? ,  fkGame=?  where id=? ";

      console.log(this.qry);
      this.stmt = this.conn.prepareStatement(this.qry);
      
      this.stmt.setString(1, this.values[1]);
      this.stmt.setString(2, this.values[2]);
      this.stmt.setString(3, this.values[3]);
      this.stmt.setString(4, this.values[4]);
      this.stmt.setString(5, this.values[5]);
      this.stmt.setString(6, this.values[6]);
      this.stmt.setString(7, this.values[7]);
      this.stmt.setString(8, this.values[8]);
      this.stmt.setString(9, this.values[9]);
      this.stmt.setString(10, this.values[10]);
            
      this.stmt.setLong  (11, this.values[0]);
    
    }else if (this.table=='offerte') { // da rivedre completamente
      this.qry = "update `cmaTec`.`offerte` set  codOfferta=? , subCodOfferta=? , "
      +"tipoOfferta=? , nomeBreve=? , oggetto=? , note=? , cliente=? , stato=? , "
      +"link=? , respOfferta=? where id=?";
      
      console.log(this.qry);
      console.log('valore di id ='+this.values[0]);
      this.stmt = this.conn.prepareStatement(this.qry);
    
      this.stmt.setString(1, this.values[1]);
      this.stmt.setString(2, this.values[2]);
      this.stmt.setString(3, this.values[3]);
      this.stmt.setString(4, this.values[4]);
      this.stmt.setString(5, this.values[5]);
      this.stmt.setString(6, this.values[6]);
      this.stmt.setString(7, this.values[7]);
      this.stmt.setString(8, this.values[8]);
      this.stmt.setString(9, this.values[9]);
      this.stmt.setString(10, this.values[10]);

      this.stmt.setLong  (11, this.values[0]);
    } else {
      console.log ('big big trouble!!');
    }
   
    this.rowsAffected =this.stmt.executeUpdate();
    return this.rowsAffected;
    console.log('out da updateDataFromQuery');
  }




}//end class wrapper
